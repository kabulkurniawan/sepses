input {
  beats{
	port => 5044
}
}

filter {
  if [log-type] == "syslog" {
     grok {
       match => { "message" => "%{SYSLOGBASE}"}
     }
     date{
       locale => "en"
       timezone => "Europe/Vienna"
       match => ["timestamp","MMM  d HH:mm:ss", "MMM dd HH:mm:ss", "ISO8601"]
       target => "timestamp"   
     }
     syslog_pri{}
     mutate{
       convert => {syslog_pid => "integer"
                   syslog_severity_code => "integer"
                   syslog_facility_code => "integer"}
       add_field =>{ 
                     "[@context]"=>"http://sepses.ifs.tuwien.ac.at/contexts/syslog.jsonld"
                      "[@type]"=>"http://purl.org/sepses/vocab/log/sysLog#SysLogEntry"
                      "[hasProcessId]"=>"%{pid}"
                      "[hasSeverity][severityCode]"=>"%{syslog_severity_code}"
                      "[hasFacility][facilityCode]"=>"%{syslog_facility_code}"
                      "[hasProgram][programName]"=>"%{program}"
                      "[hasSeverity][severityName]"=>"%{syslog_severity}"
                      "[hasFacility][facilityName]"=>"%{syslog_facility}" 
                       
          }
      remove_field =>["program","pid","syslog_program","syslog_pid","syslog_facility_code","syslog_facility","syslog_severity_code", "syslog_severity"]
     }
        
   

  } else if [log-type] == "apache" {
     grok {
      match => { "message" => "%{COMBINEDAPACHELOG}"}
     }

    date {
      locale => "en"
      timezone => "Europe/Vienna"
      match => ["timestamp","dd/MMM/yyyy:HH:mm:ss Z"]
      target => "timestamp"  
    }
    mutate {
      gsub => [
                "referrer","\"","",
                "response","200","OK"
                ]

      convert => {"bytes" => "integer"}
   
     add_field => { "[@context]" =>"http://sepses.ifs.tuwien.ac.at/contexts/apachelog.jsonld"
                   "[@type]"=>"http://purl.org/sepses/vocab/log/apacheLog#ApacheLogEntry"
                   "[hasRequestVerb]"=>"http://www.w3.org/2011/http-methods#%{verb}"
                   "[hasResponseType]"=>"http://www.w3.org/2011/http-statusCodes#%{response}"
                   "[hasResource]"=>"%{request}"
                   "[hasResourceSize]"=>"%{bytes}"
                   "[hasAgent]"=>"%{agent}"
                   "[hasHttpVersion]"=>"%{httpversion}"
                   "[hasReferrer]"=>"%{referrer}"
                   "[hasIdent]"=>"%{ident}"
                   "[hasAuth]"=>"%{auth}"
                   "[hasClient][clientIP]"=>"%{clientip}"
    } 
    remove_field => ["verb","response","bytes","request","clientip","agent","httpversion","referrer"]
  }
  } else{
  
  }
   mutate{
    

     add_field => { "[@id]"=>"http://example.org/logEntry#logEntry-%{offset}"
                    "[timestamp]" => "%{timestamp}"
                    "[logMessage]"=> "%{message}"
                    "[logFilePath]" =>  "%{source}"
                    "[hasLogType]" => "http://example.org/system#%{log-type}"
                    "[originatesFrom][hostName]" => "%{host}"
              
        }

     remove_field => ["logsource","tags","beat","prospector","@timestamp","@version","offset","message","source","timestamp","host","log-type"]
     
    
      
  }
 
 }

output { 
  file {
        path => "/home/kabul/outputlogstash/sepses_output_compact.json"
    }
 stdout{
       codec => rubydebug
 }
 }
