input {
  beats{
	port => 5044
}
}

filter {
  if [log-type] == "syslog" {
     grok {
       match => { "message" => "%{SYSLOGBASE}"}
     }
     date{
       locale => "en"
       timezone => "Europe/Vienna"
       match => ["timestamp","MMM  d HH:mm:ss", "MMM dd HH:mm:ss", "ISO8601"]
       target => "timestamp"   
  }
  } else if [log-type] == "apache" {
     grok {
      match => { "message" => "%{COMBINEDAPACHELOG}"}
     }
    date {
      locale => "en"
      timezone => "Europe/Vienna"
      match => ["timestamp","dd/MMM/yyyy:HH:mm:ss Z"]
      target => "timestamp"   
  }
  } else{
  
  }
   mutate{
    

     add_field => { "[@context][glog]" => "http://kabulkurniawan.com/vocab/genlog#"
                    "[@context][xsd]"=> "http://www.w3.org/2001/XMLSchema#"
                    "[@context][glog:originatesFrom][@type]" =>"@id"
                    "[@context][glog:hasLogType][@type]" => "@id"
                    "[@id]"=>"glog:logEntry1"
                    "[glog:logTimeStamp][@type]" => "xsd:String"
                    "[glog:logTimeStamp][@value]" => "%{timestamp}"
                    "[glog:logMessage][@type]" => "xsd:String"
                    "[glog:logMessage][@value]"=> "%{message}"
                    "[glog:logFilePath][@type]" => "xsd:String"
                    "[glog:logFilePath][@value]" =>  "%{source}"
                    "[glog:hasLogType]" => "glog:%{log-type}"
                    "[glog:originatesFrom]" => "glog:%{host}"
              
                   
               
                   


        }




     remove_field => ["logsource","tags","beat","prospector","@timestamp","@version","offset","message","source","timestamp","host","log-type"]
     convert => { "pid" => "integer"
                  "bytes" => "integer"}
     gsub => ["referrer","\"",""]
      
  }
 
 }

output { 
  file {
        path => "/home/kabul/outputlogstash/genlog_output.json"
    }
 stdout{
       codec => rubydebug
 }
 }
